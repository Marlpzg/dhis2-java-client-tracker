package org.hisp.dhis;

import java.util.Base64;

import org.hisp.dhis.query.Filter;
import org.hisp.dhis.query.Order;
import org.hisp.dhis.query.Paging;
import org.hisp.dhis.query.Query;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.util.Assert;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;

public class BaseDhis2
{
    protected static final String ID_FIELDS = "id,code,name,created,lastUpdated";
    protected static final String NAME_FIELDS = String.format( "%s,shortName,description", ID_FIELDS );
    protected static final String DATA_ELEMENT_FIELDS = String.format( "%1$s,aggregationType,valueType,domainType,legendSets[%1$s]", NAME_FIELDS );
    protected static final String CATEGORY_FIELDS = String.format( "%s,dataDimensionType,dataDimension", NAME_FIELDS );
    protected static final String RESOURCE_SYSTEM_INFO = "system/info";

    protected Dhis2Config dhis2Config;

    protected RestTemplate restTemplate;

    public BaseDhis2( Dhis2Config dhis2Config, RestTemplate restTemplate )
    {
        Assert.notNull( dhis2Config, "dhis2Config must be specified" );
        Assert.notNull( restTemplate, "restTemplate must be specified" );
        this.dhis2Config = dhis2Config;
        this.restTemplate = restTemplate;
    }

    /**
     * Retrieves an object using HTTP GET.
     *
     * @param uriBuilder the URI builder.
     * @param filters the filters to apply to the query.
     * @param klass the class type of the object.
     * @param <T> type.
     * @return the object.
     */
    protected <T> T getObject( UriComponentsBuilder uriBuilder, Query filters, Class<T> klass )
    {
        for ( Filter filter : filters.getFilters() )
        {
            String filterValue = filter.getProperty() + ":" + filter.getOperator().value() + ":" + filter.getValue();

            uriBuilder.queryParam( "filter", filterValue );
        }

        Paging paging = filters.getPaging();

        if ( paging.hasPaging() )
        {
            if ( paging.hasPage() )
            {
                uriBuilder.queryParam( "page", paging.getPage() );
            }

            if ( paging.hasPageSize() )
            {
                uriBuilder.queryParam( "pageSize", paging.getPageSize() );
            }
        }
        else
        {
            uriBuilder.queryParam( "paging", "false" );
        }

        Order order = filters.getOrder();

        if ( order.hasOrder() )
        {
            String orderValue = order.getProperty() + ":" + order.getDirection().name().toLowerCase();

            uriBuilder.queryParam( "order", orderValue );
        }

        String url = uriBuilder.build().toUriString();

        return getObjectFromUrl( url , klass );
    }

    /**
     * Retrieves an object.
     *
     * @param path the URL path.
     * @param id the object identifier.
     * @param klass the class type of the object.
     * @return the object.
     */
    protected <T> T getObject( String path, String id, Class<T> klass )
    {
        String url = dhis2Config.getResolvedUriBuilder()
            .pathSegment( path )
            .pathSegment( id ).build().toUriString();

        return getObjectFromUrl( url, klass );
    }

    /**
     * Retrieves an object using HTTP GET.
     *
     * @param url the fully qualified URL.
     * @param klass the class type of the object.
     * @param <T> type.
     * @return the object.
     */
    protected <T> T getObjectFromUrl( String url, Class<T> klass )
    {
        HttpHeaders headers =  getBasicAuthAcceptJsonHeaders();

        ResponseEntity<T> response = restTemplate.exchange( url, HttpMethod.GET, new HttpEntity<>( headers ), klass );

        return response.getBody();
    }

    /**
     * Returns a HTTP headers instance with basic authentication and Accept
     * {@value application/json} headers.
     *
     * @return a HTTP headers instance.
     */
    protected HttpHeaders getBasicAuthAcceptJsonHeaders()
    {
        HttpHeaders headers = new HttpHeaders();
        headers.set( HttpHeaders.AUTHORIZATION, getBasicAuthString( dhis2Config.getUsername(), dhis2Config.getPassword() ) );
        headers.set( HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE );
        return headers;
    }

    /**
     * Returns a basic authentication string which is generated by prepending
     * "Basic " and base64-encoding username:password.
     *
     * @param username the username to use for authentication.
     * @param password the password to use for authentication.
     * @return the encoded string.
     */
    protected static String getBasicAuthString( String username, String password )
    {
        String string = username + ":" + password;

        return "Basic " + Base64.getEncoder().encodeToString( string.getBytes() );
    }
}
